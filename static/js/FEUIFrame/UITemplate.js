// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['FEUI/UIEvent', 'util/object_extend'], function(UIEvent, ObjTool) {
  var UITemplate;
  return UITemplate = (function(_super) {
    __extends(UITemplate, _super);

    function UITemplate(option) {
      if (option == null) {
        option = {};
      }
      _super.call(this, arguments);
      this.template = option.template || "";
      this.renderMap = option.renderMap || {};
      this.subviews = {};
      this.subviewsCount = 0;
      this.$template = null;
    }

    UITemplate.prototype.render = function() {
      this.renderMap['id'] = this.id;
      this.$template = $(ObjTool.replace(this.template, this.renderMap));
      return this;
    };

    UITemplate.prototype._removeView = function(subview) {
      if (subview.id in this.subviews) {
        subview.remove();
        delete this.subviews[subview.id];
        this.subviewsCount--;
      }
      return this;
    };

    UITemplate.prototype.remove = function() {
      if (this.$template) {
        this.$template.remove();
      }
      return this;
    };

    UITemplate.prototype.addSubview = function(subview, target) {
      if (subview instanceof UITemplate) {
        subview["super"] = this;
        this.subviews[subview.id] = subview;
        this.renderMap[target] = subview.render().$template;
        this.subviewsCount++;
      }
      return this;
    };

    UITemplate.prototype.removeFromSuper = function() {
      if (this["super"]) {
        this["super"]._removeView(this);
      }
      return this;
    };

    UITemplate.prototype.addEvent = function(eventName, action, useCapture) {
      var eventHash;
      eventHash = _super.prototype.addEvent.call(this, eventName, action, useCapture);
      this.renderMap['eventKey'] = eventHash;
      return this;
    };

    return UITemplate;

  })(UIEvent);
});
